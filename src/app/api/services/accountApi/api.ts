/* tslint:disable */
/* eslint-disable */
/**
 * Account Service
 * Account Service
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BankAccountRegistrationRequest
 */
export interface BankAccountRegistrationRequest {
    /**
     * 
     * @type {string}
     * @memberof BankAccountRegistrationRequest
     */
    accountName?: string;
    /**
     * 
     * @type {string}
     * @memberof BankAccountRegistrationRequest
     */
    accountNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof BankAccountRegistrationRequest
     */
    bankName?: string;
    /**
     * 
     * @type {string}
     * @memberof BankAccountRegistrationRequest
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof BankAccountRegistrationRequest
     */
    currency?: string;
    /**
     * 
     * @type {number}
     * @memberof BankAccountRegistrationRequest
     */
    currentBalance?: number;
    /**
     * 
     * @type {number}
     * @memberof BankAccountRegistrationRequest
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BankAccountRegistrationRequest
     */
    status?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BankAccountRegistrationRequest
     */
    userId?: number;
}
/**
 * 
 * @export
 * @interface BankAccountRegistrationResponse
 */
export interface BankAccountRegistrationResponse {
    /**
     * 
     * @type {string}
     * @memberof BankAccountRegistrationResponse
     */
    accountName?: string;
    /**
     * 
     * @type {string}
     * @memberof BankAccountRegistrationResponse
     */
    accountNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof BankAccountRegistrationResponse
     */
    bankName?: string;
    /**
     * 
     * @type {string}
     * @memberof BankAccountRegistrationResponse
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof BankAccountRegistrationResponse
     */
    currency?: string;
    /**
     * 
     * @type {number}
     * @memberof BankAccountRegistrationResponse
     */
    currentBalance?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BankAccountRegistrationResponse
     */
    status?: boolean;
}
/**
 * 
 * @export
 * @interface FailureBankAccountRegistrationResponse
 */
export interface FailureBankAccountRegistrationResponse {
    /**
     * 
     * @type {string}
     * @memberof FailureBankAccountRegistrationResponse
     */
    code?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FailureBankAccountRegistrationResponse
     */
    failed?: boolean;
    /**
     * 
     * @type {FailureBankAccountRegistrationResponse}
     * @memberof FailureBankAccountRegistrationResponse
     */
    failure?: FailureBankAccountRegistrationResponse;
    /**
     * 
     * @type {string}
     * @memberof FailureBankAccountRegistrationResponse
     */
    httpStatus?: FailureBankAccountRegistrationResponseHttpStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof FailureBankAccountRegistrationResponse
     */
    message?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FailureBankAccountRegistrationResponse
     */
    success?: boolean;
    /**
     * 
     * @type {BankAccountRegistrationResponse}
     * @memberof FailureBankAccountRegistrationResponse
     */
    target?: BankAccountRegistrationResponse;
    /**
     * 
     * @type {string}
     * @memberof FailureBankAccountRegistrationResponse
     */
    traceId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FailureBankAccountRegistrationResponseHttpStatusEnum {
    _100Continue = '100 CONTINUE',
    _101SwitchingProtocols = '101 SWITCHING_PROTOCOLS',
    _102Processing = '102 PROCESSING',
    _103Checkpoint = '103 CHECKPOINT',
    _200Ok = '200 OK',
    _201Created = '201 CREATED',
    _202Accepted = '202 ACCEPTED',
    _203NonAuthoritativeInformation = '203 NON_AUTHORITATIVE_INFORMATION',
    _204NoContent = '204 NO_CONTENT',
    _205ResetContent = '205 RESET_CONTENT',
    _206PartialContent = '206 PARTIAL_CONTENT',
    _207MultiStatus = '207 MULTI_STATUS',
    _208AlreadyReported = '208 ALREADY_REPORTED',
    _226ImUsed = '226 IM_USED',
    _300MultipleChoices = '300 MULTIPLE_CHOICES',
    _301MovedPermanently = '301 MOVED_PERMANENTLY',
    _302Found = '302 FOUND',
    _302MovedTemporarily = '302 MOVED_TEMPORARILY',
    _303SeeOther = '303 SEE_OTHER',
    _304NotModified = '304 NOT_MODIFIED',
    _305UseProxy = '305 USE_PROXY',
    _307TemporaryRedirect = '307 TEMPORARY_REDIRECT',
    _308PermanentRedirect = '308 PERMANENT_REDIRECT',
    _400BadRequest = '400 BAD_REQUEST',
    _401Unauthorized = '401 UNAUTHORIZED',
    _402PaymentRequired = '402 PAYMENT_REQUIRED',
    _403Forbidden = '403 FORBIDDEN',
    _404NotFound = '404 NOT_FOUND',
    _405MethodNotAllowed = '405 METHOD_NOT_ALLOWED',
    _406NotAcceptable = '406 NOT_ACCEPTABLE',
    _407ProxyAuthenticationRequired = '407 PROXY_AUTHENTICATION_REQUIRED',
    _408RequestTimeout = '408 REQUEST_TIMEOUT',
    _409Conflict = '409 CONFLICT',
    _410Gone = '410 GONE',
    _411LengthRequired = '411 LENGTH_REQUIRED',
    _412PreconditionFailed = '412 PRECONDITION_FAILED',
    _413PayloadTooLarge = '413 PAYLOAD_TOO_LARGE',
    _413RequestEntityTooLarge = '413 REQUEST_ENTITY_TOO_LARGE',
    _414UriTooLong = '414 URI_TOO_LONG',
    _414RequestUriTooLong = '414 REQUEST_URI_TOO_LONG',
    _415UnsupportedMediaType = '415 UNSUPPORTED_MEDIA_TYPE',
    _416RequestedRangeNotSatisfiable = '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417ExpectationFailed = '417 EXPECTATION_FAILED',
    _418IAmATeapot = '418 I_AM_A_TEAPOT',
    _419InsufficientSpaceOnResource = '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420MethodFailure = '420 METHOD_FAILURE',
    _421DestinationLocked = '421 DESTINATION_LOCKED',
    _422UnprocessableEntity = '422 UNPROCESSABLE_ENTITY',
    _423Locked = '423 LOCKED',
    _424FailedDependency = '424 FAILED_DEPENDENCY',
    _426UpgradeRequired = '426 UPGRADE_REQUIRED',
    _428PreconditionRequired = '428 PRECONDITION_REQUIRED',
    _429TooManyRequests = '429 TOO_MANY_REQUESTS',
    _431RequestHeaderFieldsTooLarge = '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UnavailableForLegalReasons = '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500InternalServerError = '500 INTERNAL_SERVER_ERROR',
    _501NotImplemented = '501 NOT_IMPLEMENTED',
    _502BadGateway = '502 BAD_GATEWAY',
    _503ServiceUnavailable = '503 SERVICE_UNAVAILABLE',
    _504GatewayTimeout = '504 GATEWAY_TIMEOUT',
    _505HttpVersionNotSupported = '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VariantAlsoNegotiates = '506 VARIANT_ALSO_NEGOTIATES',
    _507InsufficientStorage = '507 INSUFFICIENT_STORAGE',
    _508LoopDetected = '508 LOOP_DETECTED',
    _509BandwidthLimitExceeded = '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NotExtended = '510 NOT_EXTENDED',
    _511NetworkAuthenticationRequired = '511 NETWORK_AUTHENTICATION_REQUIRED'
}

/**
 * 
 * @export
 * @interface FailurePaginatedBankAccountResponse
 */
export interface FailurePaginatedBankAccountResponse {
    /**
     * 
     * @type {string}
     * @memberof FailurePaginatedBankAccountResponse
     */
    code?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FailurePaginatedBankAccountResponse
     */
    failed?: boolean;
    /**
     * 
     * @type {FailurePaginatedBankAccountResponse}
     * @memberof FailurePaginatedBankAccountResponse
     */
    failure?: FailurePaginatedBankAccountResponse;
    /**
     * 
     * @type {string}
     * @memberof FailurePaginatedBankAccountResponse
     */
    httpStatus?: FailurePaginatedBankAccountResponseHttpStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof FailurePaginatedBankAccountResponse
     */
    message?: string;
    /**
     * 
     * @type {boolean}
     * @memberof FailurePaginatedBankAccountResponse
     */
    success?: boolean;
    /**
     * 
     * @type {PaginatedBankAccountResponse}
     * @memberof FailurePaginatedBankAccountResponse
     */
    target?: PaginatedBankAccountResponse;
    /**
     * 
     * @type {string}
     * @memberof FailurePaginatedBankAccountResponse
     */
    traceId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FailurePaginatedBankAccountResponseHttpStatusEnum {
    _100Continue = '100 CONTINUE',
    _101SwitchingProtocols = '101 SWITCHING_PROTOCOLS',
    _102Processing = '102 PROCESSING',
    _103Checkpoint = '103 CHECKPOINT',
    _200Ok = '200 OK',
    _201Created = '201 CREATED',
    _202Accepted = '202 ACCEPTED',
    _203NonAuthoritativeInformation = '203 NON_AUTHORITATIVE_INFORMATION',
    _204NoContent = '204 NO_CONTENT',
    _205ResetContent = '205 RESET_CONTENT',
    _206PartialContent = '206 PARTIAL_CONTENT',
    _207MultiStatus = '207 MULTI_STATUS',
    _208AlreadyReported = '208 ALREADY_REPORTED',
    _226ImUsed = '226 IM_USED',
    _300MultipleChoices = '300 MULTIPLE_CHOICES',
    _301MovedPermanently = '301 MOVED_PERMANENTLY',
    _302Found = '302 FOUND',
    _302MovedTemporarily = '302 MOVED_TEMPORARILY',
    _303SeeOther = '303 SEE_OTHER',
    _304NotModified = '304 NOT_MODIFIED',
    _305UseProxy = '305 USE_PROXY',
    _307TemporaryRedirect = '307 TEMPORARY_REDIRECT',
    _308PermanentRedirect = '308 PERMANENT_REDIRECT',
    _400BadRequest = '400 BAD_REQUEST',
    _401Unauthorized = '401 UNAUTHORIZED',
    _402PaymentRequired = '402 PAYMENT_REQUIRED',
    _403Forbidden = '403 FORBIDDEN',
    _404NotFound = '404 NOT_FOUND',
    _405MethodNotAllowed = '405 METHOD_NOT_ALLOWED',
    _406NotAcceptable = '406 NOT_ACCEPTABLE',
    _407ProxyAuthenticationRequired = '407 PROXY_AUTHENTICATION_REQUIRED',
    _408RequestTimeout = '408 REQUEST_TIMEOUT',
    _409Conflict = '409 CONFLICT',
    _410Gone = '410 GONE',
    _411LengthRequired = '411 LENGTH_REQUIRED',
    _412PreconditionFailed = '412 PRECONDITION_FAILED',
    _413PayloadTooLarge = '413 PAYLOAD_TOO_LARGE',
    _413RequestEntityTooLarge = '413 REQUEST_ENTITY_TOO_LARGE',
    _414UriTooLong = '414 URI_TOO_LONG',
    _414RequestUriTooLong = '414 REQUEST_URI_TOO_LONG',
    _415UnsupportedMediaType = '415 UNSUPPORTED_MEDIA_TYPE',
    _416RequestedRangeNotSatisfiable = '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417ExpectationFailed = '417 EXPECTATION_FAILED',
    _418IAmATeapot = '418 I_AM_A_TEAPOT',
    _419InsufficientSpaceOnResource = '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420MethodFailure = '420 METHOD_FAILURE',
    _421DestinationLocked = '421 DESTINATION_LOCKED',
    _422UnprocessableEntity = '422 UNPROCESSABLE_ENTITY',
    _423Locked = '423 LOCKED',
    _424FailedDependency = '424 FAILED_DEPENDENCY',
    _426UpgradeRequired = '426 UPGRADE_REQUIRED',
    _428PreconditionRequired = '428 PRECONDITION_REQUIRED',
    _429TooManyRequests = '429 TOO_MANY_REQUESTS',
    _431RequestHeaderFieldsTooLarge = '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UnavailableForLegalReasons = '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500InternalServerError = '500 INTERNAL_SERVER_ERROR',
    _501NotImplemented = '501 NOT_IMPLEMENTED',
    _502BadGateway = '502 BAD_GATEWAY',
    _503ServiceUnavailable = '503 SERVICE_UNAVAILABLE',
    _504GatewayTimeout = '504 GATEWAY_TIMEOUT',
    _505HttpVersionNotSupported = '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VariantAlsoNegotiates = '506 VARIANT_ALSO_NEGOTIATES',
    _507InsufficientStorage = '507 INSUFFICIENT_STORAGE',
    _508LoopDetected = '508 LOOP_DETECTED',
    _509BandwidthLimitExceeded = '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NotExtended = '510 NOT_EXTENDED',
    _511NetworkAuthenticationRequired = '511 NETWORK_AUTHENTICATION_REQUIRED'
}

/**
 * 
 * @export
 * @interface Failureboolean
 */
export interface Failureboolean {
    /**
     * 
     * @type {string}
     * @memberof Failureboolean
     */
    code?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Failureboolean
     */
    failed?: boolean;
    /**
     * 
     * @type {Failureboolean}
     * @memberof Failureboolean
     */
    failure?: Failureboolean;
    /**
     * 
     * @type {string}
     * @memberof Failureboolean
     */
    httpStatus?: FailurebooleanHttpStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Failureboolean
     */
    message?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Failureboolean
     */
    success?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Failureboolean
     */
    target?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Failureboolean
     */
    traceId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FailurebooleanHttpStatusEnum {
    _100Continue = '100 CONTINUE',
    _101SwitchingProtocols = '101 SWITCHING_PROTOCOLS',
    _102Processing = '102 PROCESSING',
    _103Checkpoint = '103 CHECKPOINT',
    _200Ok = '200 OK',
    _201Created = '201 CREATED',
    _202Accepted = '202 ACCEPTED',
    _203NonAuthoritativeInformation = '203 NON_AUTHORITATIVE_INFORMATION',
    _204NoContent = '204 NO_CONTENT',
    _205ResetContent = '205 RESET_CONTENT',
    _206PartialContent = '206 PARTIAL_CONTENT',
    _207MultiStatus = '207 MULTI_STATUS',
    _208AlreadyReported = '208 ALREADY_REPORTED',
    _226ImUsed = '226 IM_USED',
    _300MultipleChoices = '300 MULTIPLE_CHOICES',
    _301MovedPermanently = '301 MOVED_PERMANENTLY',
    _302Found = '302 FOUND',
    _302MovedTemporarily = '302 MOVED_TEMPORARILY',
    _303SeeOther = '303 SEE_OTHER',
    _304NotModified = '304 NOT_MODIFIED',
    _305UseProxy = '305 USE_PROXY',
    _307TemporaryRedirect = '307 TEMPORARY_REDIRECT',
    _308PermanentRedirect = '308 PERMANENT_REDIRECT',
    _400BadRequest = '400 BAD_REQUEST',
    _401Unauthorized = '401 UNAUTHORIZED',
    _402PaymentRequired = '402 PAYMENT_REQUIRED',
    _403Forbidden = '403 FORBIDDEN',
    _404NotFound = '404 NOT_FOUND',
    _405MethodNotAllowed = '405 METHOD_NOT_ALLOWED',
    _406NotAcceptable = '406 NOT_ACCEPTABLE',
    _407ProxyAuthenticationRequired = '407 PROXY_AUTHENTICATION_REQUIRED',
    _408RequestTimeout = '408 REQUEST_TIMEOUT',
    _409Conflict = '409 CONFLICT',
    _410Gone = '410 GONE',
    _411LengthRequired = '411 LENGTH_REQUIRED',
    _412PreconditionFailed = '412 PRECONDITION_FAILED',
    _413PayloadTooLarge = '413 PAYLOAD_TOO_LARGE',
    _413RequestEntityTooLarge = '413 REQUEST_ENTITY_TOO_LARGE',
    _414UriTooLong = '414 URI_TOO_LONG',
    _414RequestUriTooLong = '414 REQUEST_URI_TOO_LONG',
    _415UnsupportedMediaType = '415 UNSUPPORTED_MEDIA_TYPE',
    _416RequestedRangeNotSatisfiable = '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417ExpectationFailed = '417 EXPECTATION_FAILED',
    _418IAmATeapot = '418 I_AM_A_TEAPOT',
    _419InsufficientSpaceOnResource = '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420MethodFailure = '420 METHOD_FAILURE',
    _421DestinationLocked = '421 DESTINATION_LOCKED',
    _422UnprocessableEntity = '422 UNPROCESSABLE_ENTITY',
    _423Locked = '423 LOCKED',
    _424FailedDependency = '424 FAILED_DEPENDENCY',
    _426UpgradeRequired = '426 UPGRADE_REQUIRED',
    _428PreconditionRequired = '428 PRECONDITION_REQUIRED',
    _429TooManyRequests = '429 TOO_MANY_REQUESTS',
    _431RequestHeaderFieldsTooLarge = '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UnavailableForLegalReasons = '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500InternalServerError = '500 INTERNAL_SERVER_ERROR',
    _501NotImplemented = '501 NOT_IMPLEMENTED',
    _502BadGateway = '502 BAD_GATEWAY',
    _503ServiceUnavailable = '503 SERVICE_UNAVAILABLE',
    _504GatewayTimeout = '504 GATEWAY_TIMEOUT',
    _505HttpVersionNotSupported = '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VariantAlsoNegotiates = '506 VARIANT_ALSO_NEGOTIATES',
    _507InsufficientStorage = '507 INSUFFICIENT_STORAGE',
    _508LoopDetected = '508 LOOP_DETECTED',
    _509BandwidthLimitExceeded = '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NotExtended = '510 NOT_EXTENDED',
    _511NetworkAuthenticationRequired = '511 NETWORK_AUTHENTICATION_REQUIRED'
}

/**
 * 
 * @export
 * @interface PaginatedBankAccountResponse
 */
export interface PaginatedBankAccountResponse {
    /**
     * 
     * @type {Array<BankAccountRegistrationResponse>}
     * @memberof PaginatedBankAccountResponse
     */
    accounts?: Array<BankAccountRegistrationResponse>;
    /**
     * 
     * @type {number}
     * @memberof PaginatedBankAccountResponse
     */
    pageNo?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedBankAccountResponse
     */
    totalNoOfItems?: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedBankAccountResponse
     */
    totalPages?: number;
}
/**
 * 
 * @export
 * @interface ResultBankAccountRegistrationResponse
 */
export interface ResultBankAccountRegistrationResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ResultBankAccountRegistrationResponse
     */
    failed?: boolean;
    /**
     * 
     * @type {FailureBankAccountRegistrationResponse}
     * @memberof ResultBankAccountRegistrationResponse
     */
    failure?: FailureBankAccountRegistrationResponse;
    /**
     * 
     * @type {string}
     * @memberof ResultBankAccountRegistrationResponse
     */
    httpStatus?: ResultBankAccountRegistrationResponseHttpStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ResultBankAccountRegistrationResponse
     */
    success?: boolean;
    /**
     * 
     * @type {BankAccountRegistrationResponse}
     * @memberof ResultBankAccountRegistrationResponse
     */
    target?: BankAccountRegistrationResponse;
}

/**
    * @export
    * @enum {string}
    */
export enum ResultBankAccountRegistrationResponseHttpStatusEnum {
    _100Continue = '100 CONTINUE',
    _101SwitchingProtocols = '101 SWITCHING_PROTOCOLS',
    _102Processing = '102 PROCESSING',
    _103Checkpoint = '103 CHECKPOINT',
    _200Ok = '200 OK',
    _201Created = '201 CREATED',
    _202Accepted = '202 ACCEPTED',
    _203NonAuthoritativeInformation = '203 NON_AUTHORITATIVE_INFORMATION',
    _204NoContent = '204 NO_CONTENT',
    _205ResetContent = '205 RESET_CONTENT',
    _206PartialContent = '206 PARTIAL_CONTENT',
    _207MultiStatus = '207 MULTI_STATUS',
    _208AlreadyReported = '208 ALREADY_REPORTED',
    _226ImUsed = '226 IM_USED',
    _300MultipleChoices = '300 MULTIPLE_CHOICES',
    _301MovedPermanently = '301 MOVED_PERMANENTLY',
    _302Found = '302 FOUND',
    _302MovedTemporarily = '302 MOVED_TEMPORARILY',
    _303SeeOther = '303 SEE_OTHER',
    _304NotModified = '304 NOT_MODIFIED',
    _305UseProxy = '305 USE_PROXY',
    _307TemporaryRedirect = '307 TEMPORARY_REDIRECT',
    _308PermanentRedirect = '308 PERMANENT_REDIRECT',
    _400BadRequest = '400 BAD_REQUEST',
    _401Unauthorized = '401 UNAUTHORIZED',
    _402PaymentRequired = '402 PAYMENT_REQUIRED',
    _403Forbidden = '403 FORBIDDEN',
    _404NotFound = '404 NOT_FOUND',
    _405MethodNotAllowed = '405 METHOD_NOT_ALLOWED',
    _406NotAcceptable = '406 NOT_ACCEPTABLE',
    _407ProxyAuthenticationRequired = '407 PROXY_AUTHENTICATION_REQUIRED',
    _408RequestTimeout = '408 REQUEST_TIMEOUT',
    _409Conflict = '409 CONFLICT',
    _410Gone = '410 GONE',
    _411LengthRequired = '411 LENGTH_REQUIRED',
    _412PreconditionFailed = '412 PRECONDITION_FAILED',
    _413PayloadTooLarge = '413 PAYLOAD_TOO_LARGE',
    _413RequestEntityTooLarge = '413 REQUEST_ENTITY_TOO_LARGE',
    _414UriTooLong = '414 URI_TOO_LONG',
    _414RequestUriTooLong = '414 REQUEST_URI_TOO_LONG',
    _415UnsupportedMediaType = '415 UNSUPPORTED_MEDIA_TYPE',
    _416RequestedRangeNotSatisfiable = '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417ExpectationFailed = '417 EXPECTATION_FAILED',
    _418IAmATeapot = '418 I_AM_A_TEAPOT',
    _419InsufficientSpaceOnResource = '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420MethodFailure = '420 METHOD_FAILURE',
    _421DestinationLocked = '421 DESTINATION_LOCKED',
    _422UnprocessableEntity = '422 UNPROCESSABLE_ENTITY',
    _423Locked = '423 LOCKED',
    _424FailedDependency = '424 FAILED_DEPENDENCY',
    _426UpgradeRequired = '426 UPGRADE_REQUIRED',
    _428PreconditionRequired = '428 PRECONDITION_REQUIRED',
    _429TooManyRequests = '429 TOO_MANY_REQUESTS',
    _431RequestHeaderFieldsTooLarge = '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UnavailableForLegalReasons = '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500InternalServerError = '500 INTERNAL_SERVER_ERROR',
    _501NotImplemented = '501 NOT_IMPLEMENTED',
    _502BadGateway = '502 BAD_GATEWAY',
    _503ServiceUnavailable = '503 SERVICE_UNAVAILABLE',
    _504GatewayTimeout = '504 GATEWAY_TIMEOUT',
    _505HttpVersionNotSupported = '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VariantAlsoNegotiates = '506 VARIANT_ALSO_NEGOTIATES',
    _507InsufficientStorage = '507 INSUFFICIENT_STORAGE',
    _508LoopDetected = '508 LOOP_DETECTED',
    _509BandwidthLimitExceeded = '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NotExtended = '510 NOT_EXTENDED',
    _511NetworkAuthenticationRequired = '511 NETWORK_AUTHENTICATION_REQUIRED'
}

/**
 * 
 * @export
 * @interface ResultPaginatedBankAccountResponse
 */
export interface ResultPaginatedBankAccountResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ResultPaginatedBankAccountResponse
     */
    failed?: boolean;
    /**
     * 
     * @type {FailurePaginatedBankAccountResponse}
     * @memberof ResultPaginatedBankAccountResponse
     */
    failure?: FailurePaginatedBankAccountResponse;
    /**
     * 
     * @type {string}
     * @memberof ResultPaginatedBankAccountResponse
     */
    httpStatus?: ResultPaginatedBankAccountResponseHttpStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ResultPaginatedBankAccountResponse
     */
    success?: boolean;
    /**
     * 
     * @type {PaginatedBankAccountResponse}
     * @memberof ResultPaginatedBankAccountResponse
     */
    target?: PaginatedBankAccountResponse;
}

/**
    * @export
    * @enum {string}
    */
export enum ResultPaginatedBankAccountResponseHttpStatusEnum {
    _100Continue = '100 CONTINUE',
    _101SwitchingProtocols = '101 SWITCHING_PROTOCOLS',
    _102Processing = '102 PROCESSING',
    _103Checkpoint = '103 CHECKPOINT',
    _200Ok = '200 OK',
    _201Created = '201 CREATED',
    _202Accepted = '202 ACCEPTED',
    _203NonAuthoritativeInformation = '203 NON_AUTHORITATIVE_INFORMATION',
    _204NoContent = '204 NO_CONTENT',
    _205ResetContent = '205 RESET_CONTENT',
    _206PartialContent = '206 PARTIAL_CONTENT',
    _207MultiStatus = '207 MULTI_STATUS',
    _208AlreadyReported = '208 ALREADY_REPORTED',
    _226ImUsed = '226 IM_USED',
    _300MultipleChoices = '300 MULTIPLE_CHOICES',
    _301MovedPermanently = '301 MOVED_PERMANENTLY',
    _302Found = '302 FOUND',
    _302MovedTemporarily = '302 MOVED_TEMPORARILY',
    _303SeeOther = '303 SEE_OTHER',
    _304NotModified = '304 NOT_MODIFIED',
    _305UseProxy = '305 USE_PROXY',
    _307TemporaryRedirect = '307 TEMPORARY_REDIRECT',
    _308PermanentRedirect = '308 PERMANENT_REDIRECT',
    _400BadRequest = '400 BAD_REQUEST',
    _401Unauthorized = '401 UNAUTHORIZED',
    _402PaymentRequired = '402 PAYMENT_REQUIRED',
    _403Forbidden = '403 FORBIDDEN',
    _404NotFound = '404 NOT_FOUND',
    _405MethodNotAllowed = '405 METHOD_NOT_ALLOWED',
    _406NotAcceptable = '406 NOT_ACCEPTABLE',
    _407ProxyAuthenticationRequired = '407 PROXY_AUTHENTICATION_REQUIRED',
    _408RequestTimeout = '408 REQUEST_TIMEOUT',
    _409Conflict = '409 CONFLICT',
    _410Gone = '410 GONE',
    _411LengthRequired = '411 LENGTH_REQUIRED',
    _412PreconditionFailed = '412 PRECONDITION_FAILED',
    _413PayloadTooLarge = '413 PAYLOAD_TOO_LARGE',
    _413RequestEntityTooLarge = '413 REQUEST_ENTITY_TOO_LARGE',
    _414UriTooLong = '414 URI_TOO_LONG',
    _414RequestUriTooLong = '414 REQUEST_URI_TOO_LONG',
    _415UnsupportedMediaType = '415 UNSUPPORTED_MEDIA_TYPE',
    _416RequestedRangeNotSatisfiable = '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417ExpectationFailed = '417 EXPECTATION_FAILED',
    _418IAmATeapot = '418 I_AM_A_TEAPOT',
    _419InsufficientSpaceOnResource = '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420MethodFailure = '420 METHOD_FAILURE',
    _421DestinationLocked = '421 DESTINATION_LOCKED',
    _422UnprocessableEntity = '422 UNPROCESSABLE_ENTITY',
    _423Locked = '423 LOCKED',
    _424FailedDependency = '424 FAILED_DEPENDENCY',
    _426UpgradeRequired = '426 UPGRADE_REQUIRED',
    _428PreconditionRequired = '428 PRECONDITION_REQUIRED',
    _429TooManyRequests = '429 TOO_MANY_REQUESTS',
    _431RequestHeaderFieldsTooLarge = '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UnavailableForLegalReasons = '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500InternalServerError = '500 INTERNAL_SERVER_ERROR',
    _501NotImplemented = '501 NOT_IMPLEMENTED',
    _502BadGateway = '502 BAD_GATEWAY',
    _503ServiceUnavailable = '503 SERVICE_UNAVAILABLE',
    _504GatewayTimeout = '504 GATEWAY_TIMEOUT',
    _505HttpVersionNotSupported = '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VariantAlsoNegotiates = '506 VARIANT_ALSO_NEGOTIATES',
    _507InsufficientStorage = '507 INSUFFICIENT_STORAGE',
    _508LoopDetected = '508 LOOP_DETECTED',
    _509BandwidthLimitExceeded = '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NotExtended = '510 NOT_EXTENDED',
    _511NetworkAuthenticationRequired = '511 NETWORK_AUTHENTICATION_REQUIRED'
}

/**
 * 
 * @export
 * @interface Resultboolean
 */
export interface Resultboolean {
    /**
     * 
     * @type {boolean}
     * @memberof Resultboolean
     */
    failed?: boolean;
    /**
     * 
     * @type {Failureboolean}
     * @memberof Resultboolean
     */
    failure?: Failureboolean;
    /**
     * 
     * @type {string}
     * @memberof Resultboolean
     */
    httpStatus?: ResultbooleanHttpStatusEnum;
    /**
     * 
     * @type {boolean}
     * @memberof Resultboolean
     */
    success?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Resultboolean
     */
    target?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum ResultbooleanHttpStatusEnum {
    _100Continue = '100 CONTINUE',
    _101SwitchingProtocols = '101 SWITCHING_PROTOCOLS',
    _102Processing = '102 PROCESSING',
    _103Checkpoint = '103 CHECKPOINT',
    _200Ok = '200 OK',
    _201Created = '201 CREATED',
    _202Accepted = '202 ACCEPTED',
    _203NonAuthoritativeInformation = '203 NON_AUTHORITATIVE_INFORMATION',
    _204NoContent = '204 NO_CONTENT',
    _205ResetContent = '205 RESET_CONTENT',
    _206PartialContent = '206 PARTIAL_CONTENT',
    _207MultiStatus = '207 MULTI_STATUS',
    _208AlreadyReported = '208 ALREADY_REPORTED',
    _226ImUsed = '226 IM_USED',
    _300MultipleChoices = '300 MULTIPLE_CHOICES',
    _301MovedPermanently = '301 MOVED_PERMANENTLY',
    _302Found = '302 FOUND',
    _302MovedTemporarily = '302 MOVED_TEMPORARILY',
    _303SeeOther = '303 SEE_OTHER',
    _304NotModified = '304 NOT_MODIFIED',
    _305UseProxy = '305 USE_PROXY',
    _307TemporaryRedirect = '307 TEMPORARY_REDIRECT',
    _308PermanentRedirect = '308 PERMANENT_REDIRECT',
    _400BadRequest = '400 BAD_REQUEST',
    _401Unauthorized = '401 UNAUTHORIZED',
    _402PaymentRequired = '402 PAYMENT_REQUIRED',
    _403Forbidden = '403 FORBIDDEN',
    _404NotFound = '404 NOT_FOUND',
    _405MethodNotAllowed = '405 METHOD_NOT_ALLOWED',
    _406NotAcceptable = '406 NOT_ACCEPTABLE',
    _407ProxyAuthenticationRequired = '407 PROXY_AUTHENTICATION_REQUIRED',
    _408RequestTimeout = '408 REQUEST_TIMEOUT',
    _409Conflict = '409 CONFLICT',
    _410Gone = '410 GONE',
    _411LengthRequired = '411 LENGTH_REQUIRED',
    _412PreconditionFailed = '412 PRECONDITION_FAILED',
    _413PayloadTooLarge = '413 PAYLOAD_TOO_LARGE',
    _413RequestEntityTooLarge = '413 REQUEST_ENTITY_TOO_LARGE',
    _414UriTooLong = '414 URI_TOO_LONG',
    _414RequestUriTooLong = '414 REQUEST_URI_TOO_LONG',
    _415UnsupportedMediaType = '415 UNSUPPORTED_MEDIA_TYPE',
    _416RequestedRangeNotSatisfiable = '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417ExpectationFailed = '417 EXPECTATION_FAILED',
    _418IAmATeapot = '418 I_AM_A_TEAPOT',
    _419InsufficientSpaceOnResource = '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420MethodFailure = '420 METHOD_FAILURE',
    _421DestinationLocked = '421 DESTINATION_LOCKED',
    _422UnprocessableEntity = '422 UNPROCESSABLE_ENTITY',
    _423Locked = '423 LOCKED',
    _424FailedDependency = '424 FAILED_DEPENDENCY',
    _426UpgradeRequired = '426 UPGRADE_REQUIRED',
    _428PreconditionRequired = '428 PRECONDITION_REQUIRED',
    _429TooManyRequests = '429 TOO_MANY_REQUESTS',
    _431RequestHeaderFieldsTooLarge = '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UnavailableForLegalReasons = '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500InternalServerError = '500 INTERNAL_SERVER_ERROR',
    _501NotImplemented = '501 NOT_IMPLEMENTED',
    _502BadGateway = '502 BAD_GATEWAY',
    _503ServiceUnavailable = '503 SERVICE_UNAVAILABLE',
    _504GatewayTimeout = '504 GATEWAY_TIMEOUT',
    _505HttpVersionNotSupported = '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VariantAlsoNegotiates = '506 VARIANT_ALSO_NEGOTIATES',
    _507InsufficientStorage = '507 INSUFFICIENT_STORAGE',
    _508LoopDetected = '508 LOOP_DETECTED',
    _509BandwidthLimitExceeded = '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NotExtended = '510 NOT_EXTENDED',
    _511NetworkAuthenticationRequired = '511 NETWORK_AUTHENTICATION_REQUIRED'
}


/**
 * BankAccountControllerApi - axios parameter creator
 * @export
 */
export const BankAccountControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletion of the bank account
         * @summary Delete the bank account
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} accountId accountId
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankAccountUsingDELETE: async (version: string, xCorrelationId: string, accountId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', actionId?: string, latitude?: string, locale?: string, longitude?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('deleteBankAccountUsingDELETE', 'version', version)
            // verify required parameter 'xCorrelationId' is not null or undefined
            assertParamExists('deleteBankAccountUsingDELETE', 'xCorrelationId', xCorrelationId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('deleteBankAccountUsingDELETE', 'accountId', accountId)
            // verify required parameter 'authType' is not null or undefined
            assertParamExists('deleteBankAccountUsingDELETE', 'authType', authType)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('deleteBankAccountUsingDELETE', 'authorization', authorization)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('deleteBankAccountUsingDELETE', 'channelId', channelId)
            const localVarPath = `/admin/bank-accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined && version !== null) {
                localVarHeaderParameter['Version'] = String(version);
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['X-Correlation-Id'] = String(xCorrelationId);
            }

            if (actionId !== undefined && actionId !== null) {
                localVarHeaderParameter['actionId'] = String(actionId);
            }

            if (authType !== undefined && authType !== null) {
                localVarHeaderParameter['authType'] = String(authType);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (channelId !== undefined && channelId !== null) {
                localVarHeaderParameter['channelId'] = String(channelId);
            }

            if (latitude !== undefined && latitude !== null) {
                localVarHeaderParameter['latitude'] = String(latitude);
            }

            if (locale !== undefined && locale !== null) {
                localVarHeaderParameter['locale'] = String(locale);
            }

            if (longitude !== undefined && longitude !== null) {
                localVarHeaderParameter['longitude'] = String(longitude);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initial account registration for the wallet
         * @summary Account registered for the wallet
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} accountId accountId
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountUsingGET: async (version: string, xCorrelationId: string, accountId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', actionId?: string, latitude?: string, locale?: string, longitude?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getAccountUsingGET', 'version', version)
            // verify required parameter 'xCorrelationId' is not null or undefined
            assertParamExists('getAccountUsingGET', 'xCorrelationId', xCorrelationId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getAccountUsingGET', 'accountId', accountId)
            // verify required parameter 'authType' is not null or undefined
            assertParamExists('getAccountUsingGET', 'authType', authType)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAccountUsingGET', 'authorization', authorization)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getAccountUsingGET', 'channelId', channelId)
            const localVarPath = `/admin/bank-accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined && version !== null) {
                localVarHeaderParameter['Version'] = String(version);
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['X-Correlation-Id'] = String(xCorrelationId);
            }

            if (actionId !== undefined && actionId !== null) {
                localVarHeaderParameter['actionId'] = String(actionId);
            }

            if (authType !== undefined && authType !== null) {
                localVarHeaderParameter['authType'] = String(authType);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (channelId !== undefined && channelId !== null) {
                localVarHeaderParameter['channelId'] = String(channelId);
            }

            if (latitude !== undefined && latitude !== null) {
                localVarHeaderParameter['latitude'] = String(latitude);
            }

            if (locale !== undefined && locale !== null) {
                localVarHeaderParameter['locale'] = String(locale);
            }

            if (longitude !== undefined && longitude !== null) {
                localVarHeaderParameter['longitude'] = String(longitude);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initial account registration for the wallet
         * @summary Account registered for the wallet
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaginatedAccountsUsingGET: async (version: string, xCorrelationId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', actionId?: string, latitude?: string, locale?: string, longitude?: string, page?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('getPaginatedAccountsUsingGET', 'version', version)
            // verify required parameter 'xCorrelationId' is not null or undefined
            assertParamExists('getPaginatedAccountsUsingGET', 'xCorrelationId', xCorrelationId)
            // verify required parameter 'authType' is not null or undefined
            assertParamExists('getPaginatedAccountsUsingGET', 'authType', authType)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getPaginatedAccountsUsingGET', 'authorization', authorization)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('getPaginatedAccountsUsingGET', 'channelId', channelId)
            const localVarPath = `/admin/bank-accounts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (version !== undefined && version !== null) {
                localVarHeaderParameter['Version'] = String(version);
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['X-Correlation-Id'] = String(xCorrelationId);
            }

            if (actionId !== undefined && actionId !== null) {
                localVarHeaderParameter['actionId'] = String(actionId);
            }

            if (authType !== undefined && authType !== null) {
                localVarHeaderParameter['authType'] = String(authType);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (channelId !== undefined && channelId !== null) {
                localVarHeaderParameter['channelId'] = String(channelId);
            }

            if (latitude !== undefined && latitude !== null) {
                localVarHeaderParameter['latitude'] = String(latitude);
            }

            if (locale !== undefined && locale !== null) {
                localVarHeaderParameter['locale'] = String(locale);
            }

            if (longitude !== undefined && longitude !== null) {
                localVarHeaderParameter['longitude'] = String(longitude);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initial bank account creation
         * @summary Create bank account
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {BankAccountRegistrationRequest} bankAccountRegistrationRequest bankAccountRegistrationRequest
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccountUsingPOST: async (version: string, xCorrelationId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', bankAccountRegistrationRequest: BankAccountRegistrationRequest, actionId?: string, latitude?: string, locale?: string, longitude?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('registerAccountUsingPOST', 'version', version)
            // verify required parameter 'xCorrelationId' is not null or undefined
            assertParamExists('registerAccountUsingPOST', 'xCorrelationId', xCorrelationId)
            // verify required parameter 'authType' is not null or undefined
            assertParamExists('registerAccountUsingPOST', 'authType', authType)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('registerAccountUsingPOST', 'authorization', authorization)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('registerAccountUsingPOST', 'channelId', channelId)
            // verify required parameter 'bankAccountRegistrationRequest' is not null or undefined
            assertParamExists('registerAccountUsingPOST', 'bankAccountRegistrationRequest', bankAccountRegistrationRequest)
            const localVarPath = `/admin/register-bank-account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined && version !== null) {
                localVarHeaderParameter['Version'] = String(version);
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['X-Correlation-Id'] = String(xCorrelationId);
            }

            if (actionId !== undefined && actionId !== null) {
                localVarHeaderParameter['actionId'] = String(actionId);
            }

            if (authType !== undefined && authType !== null) {
                localVarHeaderParameter['authType'] = String(authType);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (channelId !== undefined && channelId !== null) {
                localVarHeaderParameter['channelId'] = String(channelId);
            }

            if (latitude !== undefined && latitude !== null) {
                localVarHeaderParameter['latitude'] = String(latitude);
            }

            if (locale !== undefined && locale !== null) {
                localVarHeaderParameter['locale'] = String(locale);
            }

            if (longitude !== undefined && longitude !== null) {
                localVarHeaderParameter['longitude'] = String(longitude);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankAccountRegistrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Bank account
         * @summary Account Update
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {BankAccountRegistrationRequest} bankAccountRegistrationRequest bankAccountRegistrationRequest
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccoutUsingPUT: async (version: string, xCorrelationId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', bankAccountRegistrationRequest: BankAccountRegistrationRequest, actionId?: string, latitude?: string, locale?: string, longitude?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'version' is not null or undefined
            assertParamExists('updateAccoutUsingPUT', 'version', version)
            // verify required parameter 'xCorrelationId' is not null or undefined
            assertParamExists('updateAccoutUsingPUT', 'xCorrelationId', xCorrelationId)
            // verify required parameter 'authType' is not null or undefined
            assertParamExists('updateAccoutUsingPUT', 'authType', authType)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('updateAccoutUsingPUT', 'authorization', authorization)
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('updateAccoutUsingPUT', 'channelId', channelId)
            // verify required parameter 'bankAccountRegistrationRequest' is not null or undefined
            assertParamExists('updateAccoutUsingPUT', 'bankAccountRegistrationRequest', bankAccountRegistrationRequest)
            const localVarPath = `/admin/bank-accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined && version !== null) {
                localVarHeaderParameter['Version'] = String(version);
            }

            if (xCorrelationId !== undefined && xCorrelationId !== null) {
                localVarHeaderParameter['X-Correlation-Id'] = String(xCorrelationId);
            }

            if (actionId !== undefined && actionId !== null) {
                localVarHeaderParameter['actionId'] = String(actionId);
            }

            if (authType !== undefined && authType !== null) {
                localVarHeaderParameter['authType'] = String(authType);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (channelId !== undefined && channelId !== null) {
                localVarHeaderParameter['channelId'] = String(channelId);
            }

            if (latitude !== undefined && latitude !== null) {
                localVarHeaderParameter['latitude'] = String(latitude);
            }

            if (locale !== undefined && locale !== null) {
                localVarHeaderParameter['locale'] = String(locale);
            }

            if (longitude !== undefined && longitude !== null) {
                localVarHeaderParameter['longitude'] = String(longitude);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bankAccountRegistrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankAccountControllerApi - functional programming interface
 * @export
 */
export const BankAccountControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BankAccountControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletion of the bank account
         * @summary Delete the bank account
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} accountId accountId
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBankAccountUsingDELETE(version: string, xCorrelationId: string, accountId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', actionId?: string, latitude?: string, locale?: string, longitude?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Resultboolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBankAccountUsingDELETE(version, xCorrelationId, accountId, authType, authorization, channelId, actionId, latitude, locale, longitude, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initial account registration for the wallet
         * @summary Account registered for the wallet
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} accountId accountId
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountUsingGET(version: string, xCorrelationId: string, accountId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', actionId?: string, latitude?: string, locale?: string, longitude?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultBankAccountRegistrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountUsingGET(version, xCorrelationId, accountId, authType, authorization, channelId, actionId, latitude, locale, longitude, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initial account registration for the wallet
         * @summary Account registered for the wallet
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaginatedAccountsUsingGET(version: string, xCorrelationId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', actionId?: string, latitude?: string, locale?: string, longitude?: string, page?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultPaginatedBankAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaginatedAccountsUsingGET(version, xCorrelationId, authType, authorization, channelId, actionId, latitude, locale, longitude, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initial bank account creation
         * @summary Create bank account
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {BankAccountRegistrationRequest} bankAccountRegistrationRequest bankAccountRegistrationRequest
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerAccountUsingPOST(version: string, xCorrelationId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', bankAccountRegistrationRequest: BankAccountRegistrationRequest, actionId?: string, latitude?: string, locale?: string, longitude?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultBankAccountRegistrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerAccountUsingPOST(version, xCorrelationId, authType, authorization, channelId, bankAccountRegistrationRequest, actionId, latitude, locale, longitude, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Bank account
         * @summary Account Update
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {BankAccountRegistrationRequest} bankAccountRegistrationRequest bankAccountRegistrationRequest
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccoutUsingPUT(version: string, xCorrelationId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', bankAccountRegistrationRequest: BankAccountRegistrationRequest, actionId?: string, latitude?: string, locale?: string, longitude?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultBankAccountRegistrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccoutUsingPUT(version, xCorrelationId, authType, authorization, channelId, bankAccountRegistrationRequest, actionId, latitude, locale, longitude, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BankAccountControllerApi - factory interface
 * @export
 */
export const BankAccountControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankAccountControllerApiFp(configuration)
    return {
        /**
         * Deletion of the bank account
         * @summary Delete the bank account
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} accountId accountId
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankAccountUsingDELETE(version: string, xCorrelationId: string, accountId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', actionId?: string, latitude?: string, locale?: string, longitude?: string, options?: any): AxiosPromise<Resultboolean> {
            return localVarFp.deleteBankAccountUsingDELETE(version, xCorrelationId, accountId, authType, authorization, channelId, actionId, latitude, locale, longitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Initial account registration for the wallet
         * @summary Account registered for the wallet
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} accountId accountId
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountUsingGET(version: string, xCorrelationId: string, accountId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', actionId?: string, latitude?: string, locale?: string, longitude?: string, options?: any): AxiosPromise<ResultBankAccountRegistrationResponse> {
            return localVarFp.getAccountUsingGET(version, xCorrelationId, accountId, authType, authorization, channelId, actionId, latitude, locale, longitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Initial account registration for the wallet
         * @summary Account registered for the wallet
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {number} [page] page
         * @param {number} [pageSize] pageSize
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaginatedAccountsUsingGET(version: string, xCorrelationId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', actionId?: string, latitude?: string, locale?: string, longitude?: string, page?: number, pageSize?: number, options?: any): AxiosPromise<ResultPaginatedBankAccountResponse> {
            return localVarFp.getPaginatedAccountsUsingGET(version, xCorrelationId, authType, authorization, channelId, actionId, latitude, locale, longitude, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Initial bank account creation
         * @summary Create bank account
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {BankAccountRegistrationRequest} bankAccountRegistrationRequest bankAccountRegistrationRequest
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccountUsingPOST(version: string, xCorrelationId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', bankAccountRegistrationRequest: BankAccountRegistrationRequest, actionId?: string, latitude?: string, locale?: string, longitude?: string, options?: any): AxiosPromise<ResultBankAccountRegistrationResponse> {
            return localVarFp.registerAccountUsingPOST(version, xCorrelationId, authType, authorization, channelId, bankAccountRegistrationRequest, actionId, latitude, locale, longitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Bank account
         * @summary Account Update
         * @param {string} version Version
         * @param {string} xCorrelationId X-Correlation-Id
         * @param {string} authType authType
         * @param {string} authorization authorization
         * @param {'MOBILE' | 'WEB'} channelId channelId
         * @param {BankAccountRegistrationRequest} bankAccountRegistrationRequest bankAccountRegistrationRequest
         * @param {string} [actionId] actionId
         * @param {string} [latitude] latitude
         * @param {string} [locale] locale
         * @param {string} [longitude] longitude
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccoutUsingPUT(version: string, xCorrelationId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', bankAccountRegistrationRequest: BankAccountRegistrationRequest, actionId?: string, latitude?: string, locale?: string, longitude?: string, options?: any): AxiosPromise<ResultBankAccountRegistrationResponse> {
            return localVarFp.updateAccoutUsingPUT(version, xCorrelationId, authType, authorization, channelId, bankAccountRegistrationRequest, actionId, latitude, locale, longitude, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BankAccountControllerApi - object-oriented interface
 * @export
 * @class BankAccountControllerApi
 * @extends {BaseAPI}
 */
export class BankAccountControllerApi extends BaseAPI {
    /**
     * Deletion of the bank account
     * @summary Delete the bank account
     * @param {string} version Version
     * @param {string} xCorrelationId X-Correlation-Id
     * @param {string} accountId accountId
     * @param {string} authType authType
     * @param {string} authorization authorization
     * @param {'MOBILE' | 'WEB'} channelId channelId
     * @param {string} [actionId] actionId
     * @param {string} [latitude] latitude
     * @param {string} [locale] locale
     * @param {string} [longitude] longitude
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountControllerApi
     */
    public deleteBankAccountUsingDELETE(version: string, xCorrelationId: string, accountId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', actionId?: string, latitude?: string, locale?: string, longitude?: string, options?: any) {
        return BankAccountControllerApiFp(this.configuration).deleteBankAccountUsingDELETE(version, xCorrelationId, accountId, authType, authorization, channelId, actionId, latitude, locale, longitude, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initial account registration for the wallet
     * @summary Account registered for the wallet
     * @param {string} version Version
     * @param {string} xCorrelationId X-Correlation-Id
     * @param {string} accountId accountId
     * @param {string} authType authType
     * @param {string} authorization authorization
     * @param {'MOBILE' | 'WEB'} channelId channelId
     * @param {string} [actionId] actionId
     * @param {string} [latitude] latitude
     * @param {string} [locale] locale
     * @param {string} [longitude] longitude
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountControllerApi
     */
    public getAccountUsingGET(version: string, xCorrelationId: string, accountId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', actionId?: string, latitude?: string, locale?: string, longitude?: string, options?: any) {
        return BankAccountControllerApiFp(this.configuration).getAccountUsingGET(version, xCorrelationId, accountId, authType, authorization, channelId, actionId, latitude, locale, longitude, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initial account registration for the wallet
     * @summary Account registered for the wallet
     * @param {string} version Version
     * @param {string} xCorrelationId X-Correlation-Id
     * @param {string} authType authType
     * @param {string} authorization authorization
     * @param {'MOBILE' | 'WEB'} channelId channelId
     * @param {string} [actionId] actionId
     * @param {string} [latitude] latitude
     * @param {string} [locale] locale
     * @param {string} [longitude] longitude
     * @param {number} [page] page
     * @param {number} [pageSize] pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountControllerApi
     */
    public getPaginatedAccountsUsingGET(version: string, xCorrelationId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', actionId?: string, latitude?: string, locale?: string, longitude?: string, page?: number, pageSize?: number, options?: any) {
        return BankAccountControllerApiFp(this.configuration).getPaginatedAccountsUsingGET(version, xCorrelationId, authType, authorization, channelId, actionId, latitude, locale, longitude, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initial bank account creation
     * @summary Create bank account
     * @param {string} version Version
     * @param {string} xCorrelationId X-Correlation-Id
     * @param {string} authType authType
     * @param {string} authorization authorization
     * @param {'MOBILE' | 'WEB'} channelId channelId
     * @param {BankAccountRegistrationRequest} bankAccountRegistrationRequest bankAccountRegistrationRequest
     * @param {string} [actionId] actionId
     * @param {string} [latitude] latitude
     * @param {string} [locale] locale
     * @param {string} [longitude] longitude
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountControllerApi
     */
    public registerAccountUsingPOST(version: string, xCorrelationId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', bankAccountRegistrationRequest: BankAccountRegistrationRequest, actionId?: string, latitude?: string, locale?: string, longitude?: string, options?: any) {
        return BankAccountControllerApiFp(this.configuration).registerAccountUsingPOST(version, xCorrelationId, authType, authorization, channelId, bankAccountRegistrationRequest, actionId, latitude, locale, longitude, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Bank account
     * @summary Account Update
     * @param {string} version Version
     * @param {string} xCorrelationId X-Correlation-Id
     * @param {string} authType authType
     * @param {string} authorization authorization
     * @param {'MOBILE' | 'WEB'} channelId channelId
     * @param {BankAccountRegistrationRequest} bankAccountRegistrationRequest bankAccountRegistrationRequest
     * @param {string} [actionId] actionId
     * @param {string} [latitude] latitude
     * @param {string} [locale] locale
     * @param {string} [longitude] longitude
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankAccountControllerApi
     */
    public updateAccoutUsingPUT(version: string, xCorrelationId: string, authType: string, authorization: string, channelId: 'MOBILE' | 'WEB', bankAccountRegistrationRequest: BankAccountRegistrationRequest, actionId?: string, latitude?: string, locale?: string, longitude?: string, options?: any) {
        return BankAccountControllerApiFp(this.configuration).updateAccoutUsingPUT(version, xCorrelationId, authType, authorization, channelId, bankAccountRegistrationRequest, actionId, latitude, locale, longitude, options).then((request) => request(this.axios, this.basePath));
    }
}


